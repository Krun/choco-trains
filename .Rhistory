baskets <- readLines(con, -1)
close(con)
df <- NULL
for(i in 1:length(baskets)){
line <- strsplit(baskets[[i]]," ",fixed=TRUE)
line <- line[[1]]
eventid <- line[[1]]
sequenceid <- line[[2]]
for(j in 4:length(line)){
df <- rbind(df,data.frame(time = eventid, installation = sequenceid, event=line[[j]]))
}
}
df$time <- as.numeric(df$time)
df$installation <- as.numeric(df$installation)
return(df)
}
testset = load_baskets(filename="baskets/antequera_1_test.txt")
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
precision <- function(antecedent,consequent,testset,winmax,winmin=1) {
triggers <-get_triggers(antecedent,testset)
success = 0;
for(i in 1:nrow(triggers)){
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
}
return(success/nrow(triggers))
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
orgrule
precision(orgrule)
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
prec
precision(antecedent, consequent, testset, winmax, winmin)
recall(antecedent, consequent, testset, winmax, winmin)
warnings()
warnings()
summary(testset)
triggers
triggers <- get_triggers(antecedent,testset)
summary(triggers)
i=1
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
success = 0
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
warnings()
recall(antecedent,consequent,testset, winmax)
nrow(testset[testset$event == consequent[[1]], ])
nrow(testset[testset$event == consequent[[1]], ])
consequent[[1]]
testset[testset$event == "saml.status.energy_switch_rack_general_failure"]
testset[testset$event == "saml.status.energy_switch_rack_general_failure", ]
testset[,testset$event == "saml.status.energy_switch_rack_general_failure"]
testset[testset$event == "saml.status.energy_switch_rack_general_failure", ]
testset[testset$event == antecedent[[1]], ]
consequent = antecedent[[1]]
recall(antecedent,consequent,testset,1,1)
precision(antecedent,consequent,testset,1,1)
triggers <-get_triggers(antecedent,testset)
success = 0;
for(i in 1:nrow(triggers)){
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
}
return(success/nrow(triggers))
nrow(triggers)
success/nrow(triggers)
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec > 0) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec>0) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec < 0) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
traceback()
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec != NaN && prec != 0) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec != NA && prec != 0) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
prec != NaN
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(!is.NaN(rec)) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(!is.nan(rec)) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
View(as(y,"data.frame"))
params = list(support=0.0001)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
library(arules)
library(arulesSequences)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
View(as(y,"data.frame"))
params = list(support=0.0001)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#View(as(y,"data.frame"))
params = list(support=0.01)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#View(as(y,"data.frame"))
params = list(support=0.1)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#View(as(y,"data.frame"))
params = list(support=0.1)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
library(arules)
library(arulesSequences)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#View(as(y,"data.frame"))
params = list(support=0.1)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
y <- read_baskets(con = "baskets/test_1_test.txt")
y <- read_baskets(con = "baskets/test_1_test.txt")
?read_baskets
x <- read_baskets(con  = system.file("misc", "zaki.txt", package =
"arulesSequences"),
info = c("sequenceID","eventID","SIZE"))
as(x, "data.frame")
x <- read_baskets(con  = system.file("misc", "zaki.txt", package =
"arulesSequences"),
info = c("sequenceID","eventID","SIZE"))
as(y, "data.frame")
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#y <- read_baskets(con = "baskets/test_1_test.txt")
#View(as(y,"data.frame"))
params = list(support=0.5)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#y <- read_baskets(con = "baskets/test_1_test.txt")
#View(as(y,"data.frame"))
params = list(support=0.3, mingap=1, maxgap=1, maxlen=2, maxsize=5)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#y <- read_baskets(con = "baskets/test_1_test.txt")
#View(as(y,"data.frame"))
params = list(support=0.01, mingap=1, maxgap=1, maxlen=2, maxsize=5)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(y1)
View(`y1`)
s1 <- y1
rules <- as.character(s1$sequence)
winmax = 1
winmin = 1
testset = load_baskets(filename="baskets/test_1_test.txt")
bfile = "sequences/test_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(is.nan(prec) | prec == 0 | is.nan(rec)) {
next
}
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
orgrule = "<{A,B,C},{C}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
prec
rec
triggers <-get_triggers(antecedent,testset)
success = 0;
for(i in 1:nrow(triggers)){
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
}
cat("triggers: ", nrow(triggers), "\n")
cat("success: ",success, "\n")
View(triggers)
get_triggers <- function(antecedent, testset) {
triggers <- testset[testset$event == antecedent[[1]], ]
if (length(antecedent) == 1){
return(triggers)
}
#else, continue applying conditions to find triggers
for(i in 2:length(antecedent)){
triggersn <- testset[testset$event == antecedent[[i]], ]
triggers <- merge(triggers, triggersn, by=c("time","installation"))
}
return(triggers)
}
triggers <-get_triggers(antecedent,testset)
success = 0;
for(i in 1:nrow(triggers)){
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
}
cat("triggers: ", nrow(triggers), "\n")
cat("success: ",success, "\n")
return(success/nrow(triggers))
View(triggers)
orgrule = "<{A,B},{C}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
prec
rec
precision <- function(antecedent,consequent,testset,winmax,winmin=1) {
triggers <-get_triggers(antecedent,testset)
success = 0;
for(i in 1:nrow(triggers)){
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
}
cat("triggers: ", nrow(triggers), "\n")
cat("success: ",success, "\n")
return(success/nrow(triggers))
}
orgrule = "<{A,B},{C}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
triggers <- get_triggers(antecedent,testset)
nrow(triggers)
View(triggers)
orgrule = "<{A,B,C},{D}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
orgrule = "<{A,B,C},{D}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
prec
rec
recall <- function(antecedent, consequent, testset, winmax, winmin=1) {
triggers <-get_triggers(antecedent,testset)
numtriggers <- nrow(triggers)
precision <- precision(antecedent,consequent,testset,winmax,winmin)
valid_predictions <- precision * numtriggers
numconsequent <- nrow(testset[testset$event == consequent[[1]], ])
recall <- valid_predictions/numconsequent
cat("cases: ",numconsequent,"\n")
cat("predicted: ",valid_predictions,"\n")
return(recall)
}
orgrule = "<{A,B,C},{D}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
s1 <- read.csv("sequences/antequera1.txt")
s1 <- read.csv("sequences/antequera1.txt")
rules <- as.character(s1$sequence)
winmax = 1
winmin = 1
testset = load_baskets(filename="baskets/antequera_1_test.txt")
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(is.nan(prec) | prec == 0 | is.nan(rec)) {
next
}
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
orgrule = "<{saml.status.channel_A_CS_down},{saml.status.energy_switch_rack_general_failure}>"
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
}
orgrule = "<{saml.status.energy_generator_running,saml.status.energy_net2_disconnected,saml.status.energy_SAI_line2_nok,saml.status.energy_switch_rack_general_failure,saml.status.channel_A_CS_unknown},{saml.status.energy_switch_rack_general_failure}>"
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(is.nan(prec) | prec < 0.5 | is.nan(rec)) {
next
}
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
View(antequera)
summary(antequera$ADDITIONAL_INFOS)
levels(antequera$ADDITIONAL_INFOS)
levels(antequera$ADDITIONAL_TEXT)
rm(rec)
rm(rec,prec,rules,orgrule,params,)
rm(rec,prec,rules,orgrule,params)
rm(x,y,winmax,winmin,tim,success,rule,ins,i,consequent,bfile,antecedent)
View(antequera)
View(antequera)
? split
sp.byelement <- split(antequera, antequera$ADDITIONAL_INFOS)
