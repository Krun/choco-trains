if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec != NaN && prec != 0) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec != NA && prec != 0) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(prec) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
prec != NaN
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(!is.NaN(rec)) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(!is.nan(rec)) {
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
}
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
View(as(y,"data.frame"))
params = list(support=0.0001)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
library(arules)
library(arulesSequences)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
View(as(y,"data.frame"))
params = list(support=0.0001)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#View(as(y,"data.frame"))
params = list(support=0.01)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#View(as(y,"data.frame"))
params = list(support=0.1)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#View(as(y,"data.frame"))
params = list(support=0.1)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
library(arules)
library(arulesSequences)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#View(as(y,"data.frame"))
params = list(support=0.1)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
y <- read_baskets(con = "baskets/test_1_test.txt")
y <- read_baskets(con = "baskets/test_1_test.txt")
?read_baskets
x <- read_baskets(con  = system.file("misc", "zaki.txt", package =
"arulesSequences"),
info = c("sequenceID","eventID","SIZE"))
as(x, "data.frame")
x <- read_baskets(con  = system.file("misc", "zaki.txt", package =
"arulesSequences"),
info = c("sequenceID","eventID","SIZE"))
as(y, "data.frame")
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#y <- read_baskets(con = "baskets/test_1_test.txt")
#View(as(y,"data.frame"))
params = list(support=0.5)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#y <- read_baskets(con = "baskets/test_1_test.txt")
#View(as(y,"data.frame"))
params = list(support=0.3, mingap=1, maxgap=1, maxlen=2, maxsize=5)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(as(y,"data.frame"))
View(y1)
y <- read_baskets(con = "baskets/test_1_test.txt", info = c("eventID","sequenceID","SIZE"))
#y <- read_baskets(con = "baskets/test_1_test.txt")
#View(as(y,"data.frame"))
params = list(support=0.01, mingap=1, maxgap=1, maxlen=2, maxsize=5)
y1 <- cspade(y, parameter=params)
y1 <- as(y1,"data.frame")
View(y1)
View(`y1`)
s1 <- y1
rules <- as.character(s1$sequence)
winmax = 1
winmin = 1
testset = load_baskets(filename="baskets/test_1_test.txt")
bfile = "sequences/test_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(is.nan(prec) | prec == 0 | is.nan(rec)) {
next
}
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
orgrule = "<{A,B,C},{C}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
prec
rec
triggers <-get_triggers(antecedent,testset)
success = 0;
for(i in 1:nrow(triggers)){
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
}
cat("triggers: ", nrow(triggers), "\n")
cat("success: ",success, "\n")
View(triggers)
get_triggers <- function(antecedent, testset) {
triggers <- testset[testset$event == antecedent[[1]], ]
if (length(antecedent) == 1){
return(triggers)
}
#else, continue applying conditions to find triggers
for(i in 2:length(antecedent)){
triggersn <- testset[testset$event == antecedent[[i]], ]
triggers <- merge(triggers, triggersn, by=c("time","installation"))
}
return(triggers)
}
triggers <-get_triggers(antecedent,testset)
success = 0;
for(i in 1:nrow(triggers)){
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
}
cat("triggers: ", nrow(triggers), "\n")
cat("success: ",success, "\n")
return(success/nrow(triggers))
View(triggers)
orgrule = "<{A,B},{C}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
prec
rec
precision <- function(antecedent,consequent,testset,winmax,winmin=1) {
triggers <-get_triggers(antecedent,testset)
success = 0;
for(i in 1:nrow(triggers)){
ins <- triggers[i,]$installation
tim <- triggers[i,]$time
valid <- subset(testset, time >= tim+winmin & time <= tim+winmax & installation == ins & event == consequent[[1]])
success = success + (nrow(valid) >= 1)
}
cat("triggers: ", nrow(triggers), "\n")
cat("success: ",success, "\n")
return(success/nrow(triggers))
}
orgrule = "<{A,B},{C}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
triggers <- get_triggers(antecedent,testset)
nrow(triggers)
View(triggers)
orgrule = "<{A,B,C},{D}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
orgrule = "<{A,B,C},{D}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
prec
rec
recall <- function(antecedent, consequent, testset, winmax, winmin=1) {
triggers <-get_triggers(antecedent,testset)
numtriggers <- nrow(triggers)
precision <- precision(antecedent,consequent,testset,winmax,winmin)
valid_predictions <- precision * numtriggers
numconsequent <- nrow(testset[testset$event == consequent[[1]], ])
recall <- valid_predictions/numconsequent
cat("cases: ",numconsequent,"\n")
cat("predicted: ",valid_predictions,"\n")
return(recall)
}
orgrule = "<{A,B,C},{D}>"
rule = processrule(orgrule)
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
s1 <- read.csv("sequences/antequera1.txt")
s1 <- read.csv("sequences/antequera1.txt")
rules <- as.character(s1$sequence)
winmax = 1
winmin = 1
testset = load_baskets(filename="baskets/antequera_1_test.txt")
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(is.nan(prec) | prec == 0 | is.nan(rec)) {
next
}
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
orgrule = "<{saml.status.channel_A_CS_down},{saml.status.energy_switch_rack_general_failure}>"
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
}
orgrule = "<{saml.status.energy_generator_running,saml.status.energy_net2_disconnected,saml.status.energy_SAI_line2_nok,saml.status.energy_switch_rack_general_failure,saml.status.channel_A_CS_unknown},{saml.status.energy_switch_rack_general_failure}>"
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
}
bfile = "sequences/antequera_eval_1.txt"
cat(file=bfile)
for (i in 1:length(rules)){
orgrule = rules[[i]]
rule = processrule(orgrule)
if (single_consequent(rule)){
antecedent = rule[[1]]
consequent = rule[[2]]
prec <- precision(antecedent, consequent, testset, winmax, winmin)
rec <- recall(antecedent, consequent, testset, winmax, winmin)
if(is.nan(prec) | prec < 0.5 | is.nan(rec)) {
next
}
cat(file=bfile, orgrule, prec, rec, "\n", append=TRUE)
}
}
View(antequera)
summary(antequera$ADDITIONAL_INFOS)
levels(antequera$ADDITIONAL_INFOS)
levels(antequera$ADDITIONAL_TEXT)
rm(rec)
rm(rec,prec,rules,orgrule,params,)
rm(rec,prec,rules,orgrule,params)
rm(x,y,winmax,winmin,tim,success,rule,ins,i,consequent,bfile,antecedent)
View(antequera)
View(antequera)
? split
sp.byelement <- split(antequera, antequera$ADDITIONAL_INFOS)
? merge
errortext$ADDITIONAL_TEXT <- errortext$X.ADDITIONAL_TEXT
View(errortext)
errortext$X.ADDITIONAL_TEXT <- NULL
antequera_msgd <- antequera
antequera_msgd$ID_LANGUAGE = 1
antequera_msgd <- merge(antequera_msgd,errortext, by=c("ID_LANGUAGE","ADDITIONAL_TEXT"))
View(antequera_msgd)
antequera_msgd$ID_LANGUAGE <- NULL
View(antequera_msgd)
antequera_byelement <- split(antequera_msgd, antequera_msgd$ADDITIONAL_INFOS)
frame <- antequera_byelement[[1]]
View(frame)
frame <- antequera_byelement[[2]]
View(frame)
frame <- antequera_byelement[[10]]
View(frame)
levels(frame$ERROR_TEXT)
levels(droplevels(frame$ERROR_TEXT)
)
levels(droplevels(frame$ERROR_TEXT))
levels(factor(frame$ERROR_TEXT))
frame$ERROR_TEXT
levels(factor(as.character(frame$ERROR_TEXT)))
cat(levels(factor(as.character(frame$ERROR_TEXT))))
cat(levels(factor(as.character(frame$ERROR_TEXT))), sep="\n")
bfile = "alarmlists/byelement/antequera.txt"
cat(file = bfile)
for (i in 1:length(antequera_byelement)){
frame <- antequera_byelement[[i]]
levels <- levels(droplevels(frame$ERROR_TEXT))
cat ("Elemento ", frame$ADDITIONAL_INFOS[[1]], "\n\n", file = bfile)
cat (levels, "\n", file=bfile, sep="\n")
}
bfile = "alarmlists/byelement/antequera.txt"
cat(file = bfile)
for (i in 1:length(antequera_byelement)){
frame <- antequera_byelement[[i]]
levels <- levels(droplevels(frame$ERROR_TEXT))
cat ("Elemento ", frame$ADDITIONAL_INFOS[[1]], "\n\n", file = bfile)
cat (levels, "\n", file=bfile, sep="\n")
}
length(antequera_byelement)
i = 4
frame <- antequera_byelement[[i]]
levels <- levels(droplevels(frame$ERROR_TEXT))
cat ("Elemento ", frame$ADDITIONAL_INFOS[[1]], "\n\n", file = bfile)
cat (levels, "\n", file=bfile, sep="\n")
bfile = "alarmlists/byelement/antequera.txt"
cat(file = bfile)
for (i in 1:length(antequera_byelement)){
frame <- antequera_byelement[[i]]
levels <- levels(droplevels(frame$ERROR_TEXT))
cat ("Elemento ", frame$ADDITIONAL_INFOS[[1]], "\n\n", file = bfile, append=TRUE)
cat (levels, "\n", file=bfile, sep="\n", append=TRUE)
}
frame$ADDITIONAL_INFOS[[1]]
as.character(frame$ADDITIONAL_INFOS[[1]])
bfile = "alarmlists/byelement/antequera.txt"
cat(file = bfile)
for (i in 1:length(antequera_byelement)){
frame <- antequera_byelement[[i]]
levels <- levels(droplevels(frame$ERROR_TEXT))
cat ("Elemento ", as.character(frame$ADDITIONAL_INFOS[[1]]), "\n\n", file = bfile, append=TRUE)
cat (levels, "\n", file=bfile, sep="\n", append=TRUE)
}
bfile = "alarmlists/byelement/antequera.txt"
cat(file = bfile)
for (i in 1:length(antequera_byelement)){
frame <- antequera_byelement[[i]]
levels <- levels(droplevels(frame$ERROR_TEXT))
cat ("Elemento ", as.character(frame$ADDITIONAL_INFOS[[1]]), "  ----  ", as.character(frame$INVOKE_TYPE),"  ----  ",as.character(frame$EVENT_TYPE),"\n\n", file = bfile, append=TRUE)
cat (levels, "\n", file=bfile, sep="\n", append=TRUE)
}
bfile = "alarmlists/byelement/antequera.txt"
cat(file = bfile)
for (i in 1:length(antequera_byelement)){
frame <- antequera_byelement[[i]]
cat ("Elemento ", as.character(frame$ADDITIONAL_INFOS[[1]]), "\n\n", file = bfile, append=TRUE)
frame$TEXT <- paste(frame$ERROR_TEXT,frame$INVOKE_TYPE,frame$EVENT_TYPE,sep=' --- ')
levels <- levels(factor(frame$TEXT))
cat (levels, "\n", file = bfile, append=TRUE)
}
bfile = "alarmlists/byelement/antequera.txt"
cat(file = bfile)
for (i in 1:length(antequera_byelement)){
frame <- antequera_byelement[[i]]
cat ("Elemento ", as.character(frame$ADDITIONAL_INFOS[[1]]), "\n\n", file = bfile, append=TRUE)
frame$TEXT <- paste(frame$ERROR_TEXT,frame$INVOKE_TYPE,frame$EVENT_TYPE,sep=' --- ')
levels <- levels(factor(frame$TEXT))
cat (levels, "\n", sep="\n", file = bfile, append=TRUE)
}
antequera_msgd$ELEMENT_TYPE <- " "
index1 <- with(antequera_msgd, grepl("V", ADDITIONAL_INFOS))
antequera_msgd[index1, ]
test <- antequera_msgd[index1, ]
levels(factor(test$ADDITIONAL_TEXT))
levels(factor(test$ERROR_TEXT))
antequera_msgd[index1, ]$ELEMENT_TYPE <- "circuito_via"
index1 <- with(antequera_msgd, grepl("S", ADDITIONAL_INFOS))
test <- antequera_msgd[index1, ]
levels(factor(test$ERROR_TEXT))
index1 <- with(antequera_msgd, grepl(".TXT", ADDITIONAL_INFOS))
test <- antequera_msgd[index1, ]
levels(factor(test$ERROR_TEXT))
antequera_msgd[index1, ] <- NULL
antequera_msgd <- antequera_msgd[!index1, ]
index1 <- with(antequera_msgd, grepl(".TXT", ADDITIONAL_INFOS))
test <- antequera_msgd[index1, ]
levels(factor(test$ERROR_TEXT))
index1 <- with(antequera_msgd, grep("^S", ADDITIONAL_INFOS, perl=TRUE))
test <- antequera_msgd[index1, ]
levels(factor(test$ERROR_TEXT))
index1 <- with(antequera_msgd, grep("^S", ADDITIONAL_INFOS, perl=TRUE))
test <- antequera_msgd[index1, ]
levels(factor(test$ERROR_TEXT))
antequera_msgd[index1, ]$ELEMENT_TYPE <- "luces_S"
index1 <- with(antequera_msgd, grep("^R", ADDITIONAL_INFOS, perl=TRUE))
test <- antequera_msgd[index1, ]
levels(factor(test$ERROR_TEXT))
index1 <- with(antequera_msgd, grep("^R{0-9}*", ADDITIONAL_INFOS, perl=TRUE))
test <- antequera_msgd[index1, ]
levels(factor(test$ERROR_TEXT))
csv.write(antequera_msgd,file="datos/current/antequera_msgd.txt")
write.csv(antequera_msgd,file="datos/current/antequera_msgd.txt")
write.csv(antequera_msgd,file="Datos/current/antequera_msgd.txt")
antequera_msgd$ELEMENT_TYPE <- antequera_msgd$ADDITIONAL_INFOS
write.csv(antequera_msgd,file="Datos/current/antequera_msgd.txt")
rm(antequera_byelement)
rm(sp.byelement)
rm(i,levels,index1,bfile)
rm(s1)
rm(frame)
rm(y1)
rm(valid)
rm(triggers)
rm(testset)
rm(test)
rm(albacete)
rm(sevilla)
elementize <- function(target, bfile){
target_msgd <- target
target_msgd$ID_LANGUAGE = 1
target_msgd <- merge(antequera_msgd, errortext, by=c("ID_LANGUAGE","ADDITIONAL_TEXT"))
target_msgd$ID_LANGUAGE <- NULL
target_byelement <- split(target_msgd, target_msgd$ADDITIONAL_INFOS)
cat(file = bfile)
for(i in 1:length(target_byelement)){
frame <- target_byelement[[i]]
cat("Elemento ", as.character(frame$ADDITIONAL_INFOS[[1]]), "\n\n", file = bfile, append=TRUE)
frame$TEXT <- paste(frame$ERROR_TEXT,frame$INVOKE_TYPE,frame$EVENT_TYPE,sep=' --- ')
levels <- levels(factor(frame$TEXT))
cat (levels, "\n", sep="\n", file = bfile, append=TRUE)
}
}
elementize(segovia, "alarmslists/byelement/segovia.txt")
View(segovia)
View(segovia)
View(segovia)
elementize <- function(target, bfile){
target_msgd <- target
target_msgd$ID_LANGUAGE = 1
target_msgd <- merge(target_msgd, errortext, by=c("ID_LANGUAGE","ADDITIONAL_TEXT"))
target_msgd$ID_LANGUAGE <- NULL
target_byelement <- split(target_msgd, target_msgd$ADDITIONAL_INFOS)
cat(file = bfile)
for(i in 1:length(target_byelement)){
frame <- target_byelement[[i]]
cat("Elemento ", as.character(frame$ADDITIONAL_INFOS[[1]]), "\n\n", file = bfile, append=TRUE)
frame$TEXT <- paste(frame$ERROR_TEXT,frame$INVOKE_TYPE,frame$EVENT_TYPE,sep=' --- ')
levels <- levels(factor(frame$TEXT))
cat (levels, "\n", sep="\n", file = bfile, append=TRUE)
}
}
elementize(target=segovia, bfile="alarmlists/byelement/segovia.txt")
